# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import tdw.flatbuffers

class StaticRigidbodies(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStaticRigidbodies(cls, buf, offset):
        n = tdw.flatbuffers.encode.Get(tdw.flatbuffers.packer.uoffset, buf, offset)
        x = StaticRigidbodies()
        x.Init(buf, n + offset)
        return x

    # StaticRigidbodies
    def Init(self, buf, pos):
        self._tab = tdw.flatbuffers.table.Table(buf, pos)

    # StaticRigidbodies
    def Objects(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from .StaticRigidbodyData import StaticRigidbodyData
            obj = StaticRigidbodyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # StaticRigidbodies
    def ObjectsLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def StaticRigidbodiesStart(builder): builder.StartObject(1)
def StaticRigidbodiesAddObjects(builder, objects): builder.PrependUOffsetTRelativeSlot(0, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(objects), 0)
def StaticRigidbodiesStartObjectsVector(builder, numElems): return builder.StartVector(24, numElems, 4)
def StaticRigidbodiesEnd(builder): return builder.EndObject()
