# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import tdw.flatbuffers

class Transforms(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTransforms(cls, buf, offset):
        n = tdw.flatbuffers.encode.Get(tdw.flatbuffers.packer.uoffset, buf, offset)
        x = Transforms()
        x.Init(buf, n + offset)
        return x

    # Transforms
    def Init(self, buf, pos):
        self._tab = tdw.flatbuffers.table.Table(buf, pos)

    # Transforms
    def Objects(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j) * 44
            from .TransformData import TransformData
            obj = TransformData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Transforms
    def ObjectsLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TransformsStart(builder): builder.StartObject(1)
def TransformsAddObjects(builder, objects): builder.PrependUOffsetTRelativeSlot(0, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(objects), 0)
def TransformsStartObjectsVector(builder, numElems): return builder.StartVector(44, numElems, 4)
def TransformsEnd(builder): return builder.EndObject()
