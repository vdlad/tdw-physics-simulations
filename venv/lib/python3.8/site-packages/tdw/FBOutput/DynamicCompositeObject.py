# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import tdw.flatbuffers

class DynamicCompositeObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDynamicCompositeObject(cls, buf, offset):
        n = tdw.flatbuffers.encode.Get(tdw.flatbuffers.packer.uoffset, buf, offset)
        x = DynamicCompositeObject()
        x.Init(buf, n + offset)
        return x

    # DynamicCompositeObject
    def Init(self, buf, pos):
        self._tab = tdw.flatbuffers.table.Table(buf, pos)

    # DynamicCompositeObject
    def Id(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DynamicCompositeObject
    def Hinges(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DynamicHinge import DynamicHinge
            obj = DynamicHinge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DynamicCompositeObject
    def HingesLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DynamicCompositeObject
    def Lights(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DynamicLight import DynamicLight
            obj = DynamicLight()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DynamicCompositeObject
    def LightsLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DynamicCompositeObjectStart(builder): builder.StartObject(3)
def DynamicCompositeObjectAddId(builder, id): builder.PrependInt32Slot(0, id, 0)
def DynamicCompositeObjectAddHinges(builder, hinges): builder.PrependUOffsetTRelativeSlot(1, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(hinges), 0)
def DynamicCompositeObjectStartHingesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DynamicCompositeObjectAddLights(builder, lights): builder.PrependUOffsetTRelativeSlot(2, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(lights), 0)
def DynamicCompositeObjectStartLightsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DynamicCompositeObjectEnd(builder): return builder.EndObject()
